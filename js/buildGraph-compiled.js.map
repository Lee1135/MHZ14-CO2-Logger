{"version":3,"sources":["buildGraph.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAGA;;;;;UA4BgB;;;;;;;;;;;;AAvBhB,WAAS,QAAT,CAAkB,IAAlB,EAAwB;;;AACtB,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAoB;AACrC,uBAAE,IAAF,CAAO,IAAP,EAAa,EAAC,UAAU,MAAV,EAAd,EACK,IADL,CACU,UAAC,GAAD,EAAQ;AACZ,YAAI,IAAI,EAAJ,CADQ;AAEZ,YAAI,IAAI,EAAJ,CAFQ;AAGZ,YAAI,KAAJ,CAAU,IAAV,EAAgB,GAAhB,CAAoB,UAAC,IAAD,EAAS;AAC3B,cAAI,IAAI,KAAK,KAAL,CAAW,IAAX,CAAJ,CADuB;AAE3B,cAAI,EAAE,MAAF,GAAW,CAAX,EAAc,OAAO,KAAP,CAAlB;AACA,YAAE,IAAF,CAAO,EAAE,CAAF,CAAP,EAH2B;AAI3B,YAAE,IAAF,CAAO,EAAE,CAAF,CAAP,EAJ2B;AAK3B,iBAAO,IAAP,CAL2B;SAAT,CAApB,CAHY;AAUZ,gBAAQ,CAAC,EAAC,GAAG,CAAH,EAAM,GAAG,CAAH,EAAR,CAAR,EAVY;OAAR,CADV,CAaK,KAbL,CAaW,YAAK;AACV,gBAAQ,GAAR,CAAY,gBAAZ,cADU;AAEV,cAAM,eAAN,EAFU;AAGV,iBAHU;OAAL,CAbX,CADqC;KAApB,CAAnB,CADsB;GAAxB;;AAuBO,WAAS,IAAT,CAAc,MAAd,EAAgD;QAA1B,iEAAW,6BAAe;;AACrD,QAAI,OAAO,MAAP,IAAkB,QAAlB,EAA4B,SAAS,SAAS,cAAT,CAAwB,MAAxB,CAAT,CAAhC;AACA,QAAI,cAAc,SAAS,QAAT,CAAd,CAFiD;AAGrD,QAAI,SAAS;AACX,aAAO,mBAAP;AACA,aAAO;AACL,eAAO,MAAP;AACA,kBAAU,KAAV;OAFF;AAIA,aAAO;AACL,eAAO,SAAP;OADF;KANE,CAHiD;AAarD,QAAI,SAAS;AACX,kBAAY,IAAZ;AACA,mBAAa,IAAb;AACA,sBAAgB,IAAhB;KAHE,CAbiD;AAkBrD,gBAAY,IAAZ,CAAiB,UAAC,IAAD;aAAQ,iBAAO,IAAP,CAAY,MAAZ,EAAoB,IAApB,EAA0B,MAA1B,EAAkC,MAAlC;KAAR,CAAjB,CAlBqD;GAAhD","file":"buildGraph-compiled.js","sourcesContent":["/**\n * Created by alpaca on 3/25/16.\n */\n\"use strict\";\n\nimport plotly from \"plotly\";\nimport $ from \"jquery\";\n \nfunction loadFile(name) {\n  return new Promise((resolve, reject)=> {\n    $.ajax(name, {dataType: \"text\"})\n        .done((raw)=> {\n          let x = [];\n          let y = [];\n          raw.split(\"\\n\").map((line)=> {\n            let t = line.split('\\t');\n            if (t.length < 2) return false;\n            x.push(t[0]);\n            y.push(t[1]);\n            return null;\n          });\n          resolve([{x: x, y: y}]);\n        })\n        .error(()=> {\n          console.log(\"loading error \", arguments);\n          alert(\"loading error\");\n          reject();\n        });\n  })\n}\n\nexport function plot(target, filename = \"example.log\") {\n  if (typeof(target) == 'string') target = document.getElementById(target);\n  let dataPromise = loadFile(filename);\n  let layout = {\n    title: 'CO2 concentration',\n    xaxis: {\n      title: 'Time',\n      showgrid: false\n    },\n    yaxis: {\n      title: 'CO2 ppa'\n    }\n  };\n  let config = {\n    scrollZoom: true,\n    autosizable: true,\n    displayModeBar: true\n  };\n  dataPromise.then((data)=>plotly.plot(target, data, layout, config));\n}\n"]}